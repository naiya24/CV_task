import cv2
import numpy as np
import moviepy.editor as mp
from pathlib import Path
import os
from typing import Tuple, Optional

class VideoHighlightGenerator:
    def __init__(self):
        self.formats = {
            'instagram': (1080, 1920),
            'youtube_shorts': (1080, 1920),
            'tiktok': (1080, 1920),
            'reels': (1080, 1920),
            'story': (1080, 1920)
        }
        self.motion_threshold = 30.0

    def detect_interesting_scenes(self, video_path: str) -> list:
        cap = cv2.VideoCapture(video_path)
        fps = cap.get(cv2.CAP_PROP_FPS)
        frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

        scenes = []
        prev_frame = None
        scene_start = 0
        current_score = 0

        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            if prev_frame is not None:
                diff = cv2.absdiff(prev_frame, gray)
                motion_score = np.mean(diff)
                if motion_score > self.motion_threshold:
                    scenes.append((scene_start, cap.get(cv2.CAP_PROP_POS_MSEC) / 1000, current_score))
                    scene_start = cap.get(cv2.CAP_PROP_POS_MSEC) / 1000
                    current_score = motion_score
                else:
                    current_score += motion_score
            prev_frame = gray

        cap.release()
        scenes.sort(key=lambda x: x[2], reverse=True)
        return scenes

    def create_highlight(self, video_path: str, output_path: str, target_duration: float = 30.0, 
                         format: str = 'reels', add_music: bool = False, music_path: Optional[str] = None):
        if format not in self.formats:
            raise ValueError(f"Unsupported format. Choose from: {list(self.formats.keys())}")

        if not os.path.exists(video_path):
            raise FileNotFoundError(f"Video file '{video_path}' not found.")

        scenes = self.detect_interesting_scenes(video_path)

        selected_scenes = []
        current_duration = 0

        for scene in scenes:
            scene_duration = scene[1] - scene[0]
            if current_duration + scene_duration <= target_duration:
                selected_scenes.append(scene)
                current_duration += scene_duration
            if current_duration >= target_duration:
                break

        video = mp.VideoFileClip(video_path)
        clips = [video.subclip(start, end) for start, end, _ in selected_scenes]

        final_clip = mp.concatenate_videoclips(clips)
        target_size = self.formats[format]
        final_clip = self.resize_for_social(final_clip, target_size)

        if add_music and music_path:
            if not os.path.exists(music_path):
                raise FileNotFoundError(f"Music file '{music_path}' not found.")

            background_music = mp.AudioFileClip(music_path)
            if background_music.duration < final_clip.duration:
                n_loops = int(np.ceil(final_clip.duration / background_music.duration))
                background_music = mp.concatenate_audioclips([background_music] * n_loops)

            background_music = background_music.subclip(0, final_clip.duration)
            background_music = background_music.volumex(0.3)
            final_audio = mp.CompositeAudioClip([final_clip.audio, background_music])
            final_clip = final_clip.set_audio(final_audio)

        final_clip.write_videofile(output_path, codec='libx264', audio_codec='aac', fps=30)
        video.close()

    def resize_for_social(self, clip: mp.VideoFileClip, target_size: Tuple[int, int]) -> mp.VideoFileClip:
        w, h = clip.size
        target_w, target_h = target_size
        aspect_ratio = w / h
        target_aspect = target_w / target_h

        if aspect_ratio > target_aspect:
            new_w = target_w
            new_h = int(target_w / aspect_ratio)
        else:
            new_h = target_h
            new_w = int(target_h * aspect_ratio)

        resized = clip.resize((new_w, new_h))
        background = mp.ColorClip(target_size, color=(0, 0, 0)).set_duration(clip.duration)
        x_center = (target_w - new_w) // 2
        y_center = (target_h - new_h) // 2

        return mp.CompositeVideoClip([background, resized.set_position((x_center, y_center))])

def main():
    input_video = "/content/VID_20230416_200704.mp4"
    output_video = "highlight_reel.mp4"
    background_music = "background_music.mp3"

    if not os.path.exists(input_video):
        print(f"Error: Input video file '{input_video}' not found.")
        return

    generator = VideoHighlightGenerator()
    generator.create_highlight(
        video_path=input_video,
        output_path=output_video,
        target_duration=30.0,
        format='reels',
        add_music=True,
        music_path=background_music
    )

if __name__ == "__main__":
    main()
